---
// import { BM25Utils } from "astro-relatinator"
import { Image } from "astro:assets"
import type { CollectionEntry } from "astro:content"
import { getCollection, getEntry } from "astro:content"
import VideoJSONLD from "../../components/VideoJSONLD.astro"
import DefaultLayout from "../../layouts/DefaultLayout.astro"
import SmallVideoCard from "../../components/SmallVideoCard.astro"
import PageTitle from "../../components/PageTitle.astro"

export async function getStaticPaths() {
  const posts = await getCollection("videos")
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: post,
  }))
}

type Props = CollectionEntry<"videos">
const { slug, data, render } = Astro.props

const category = await getEntry("categories", data.type)

const allVideos = await getCollection("videos")
const indexOfCurrentVideo = allVideos.findIndex(
  (video) => video.data.title === data.title,
)
const nextVideos = allVideos.slice(
  indexOfCurrentVideo + 1,
  indexOfCurrentVideo + 4,
)

if (nextVideos.length < 3) {
  const remainingVideos = allVideos.slice(0, 3 - nextVideos.length)
  nextVideos.push(...remainingVideos)
}

const { Content } = await render()
---

<DefaultLayout video={data.videoURL} image={data.image.src} title={data.title}>
  <VideoJSONLD {...Astro.props} />
  <div
    class="fixed inset-0 z-50 h-full overflow-y-scroll bg-black pt-12 opacity-100 backdrop-blur-3xl backdrop-brightness-200 backdrop-saturate-200 md:pt-0 starting:opacity-0 starting:backdrop-blur-none"
  >
    <div class="w-container mx-auto grid grid-cols-[1fr_auto_1fr]">
      <div>
        <a
          class="text-foreground hover:text-foreground fixed top-4 left-4 z-20 flex w-max translate-x-0 items-center gap-1 rounded-full bg-black/50 px-4 py-2 text-sm opacity-100 backdrop-blur-md transition-all delay-300 duration-300 hover:bg-black hover:ring-1 hover:ring-white/20 starting:translate-x-2 starting:opacity-0"
          href="javascript:history.back()"
        >
          <svg viewBox="0 0 24 24" class="w-[0.65rem] fill-current">
            <use href="/assets/arrow-left.svg#icon"></use>
          </svg>
          Back
        </a>
      </div>
      <div class="w-container relative mx-auto max-w-7xl py-4 md:p-10">
        <video
          transition:persist
          transition:name={`video-${slug}`}
          autoplay
          controls
          class="absolute aspect-video rounded-xl object-cover ring-2 shadow-lg shadow-neutral-950 ring-white/5 ring-inset md:w-[calc(100%-5rem)]"
          src={data.videoURL}
          poster={data.image.src}
          preload="none"
          playsinline></video>

        <div class="mb-20 aspect-video w-full"></div>
        <div
          class="flex w-full flex-col flex-wrap justify-between gap-8 md:flex-row md:items-center"
        >
          <PageTitle
            class="pointer-events-none z-50 order-2 flex h-5 items-center text-2xl font-semibold shadow-neutral-950 md:order-1"
            transition:name={`video-title-${slug}`}
          >
            {data.title}
          </PageTitle>
        </div>
        <div
          class="spring-duration-500 spring-bounce-20 flex translate-y-0 flex-col gap-6 pt-14 starting:translate-y-56"
        >
          <div class="flex flex-col justify-between gap-5 md:flex-row">
            <div class="flex max-w-prose flex-col gap-3">
              {
                Content && (
                  <>
                    <span class="text-xs font-bold tracking-widest uppercase">
                      Description
                    </span>
                    <p>
                      <Content />
                    </p>
                  </>
                )
              }

              {
                nextVideos && (
                  <div class="flex flex-col gap-2">
                    <span class="text-xs font-bold tracking-widest uppercase">
                      Up Next
                    </span>
                    <div class="no-scrollbar flex flex-nowrap gap-2 overflow-x-auto">
                      {nextVideos.map((video) => (
                        <SmallVideoCard {...video} />
                      ))}
                    </div>
                  </div>
                )
              }
            </div>

            <div class="flex flex-col flex-wrap gap-4">
              {
                category?.data.title || data.meta ? (
                  <div class="mb-auto flex min-h-36 w-full flex-col gap-3 rounded-xl bg-neutral-200/10 p-6 ring-1 ring-white/15 md:w-72">
                    {category?.data.title && (
                      <div class="flex flex-col gap-3">
                        <span class="text-xs font-bold tracking-widest uppercase">
                          Category
                        </span>
                        <span>{category?.data.title}</span>
                      </div>
                    )}

                    {data.meta &&
                      data.meta.map(({ label, value }) => (
                        <div class="flex flex-col">
                          <span class="text-xxs text-accent-300 tracking-widest uppercase">
                            {label}
                          </span>
                          <span>{value}</span>
                        </div>
                      ))}

                    {(data.awards?.length ?? 0) > 0 && (
                      <div class="flex flex-wrap">
                        {data.awards!.map((awardImage) => (
                          <Image
                            src={awardImage}
                            alt=""
                            class="spring-duration-200 spring-bounce-20 w-20 rounded-2xl hover:z-10 hover:scale-200 hover:bg-black"
                          />
                        ))}
                      </div>
                    )}
                  </div>
                ) : null
              }
            </div>
          </div>
        </div>
      </div>
      <div></div>
    </div>
  </div>
</DefaultLayout>
